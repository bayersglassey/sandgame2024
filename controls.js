'use strict';

var FRAMERATE = 30;
var LOG_KEYS = false;
var MAGIC = 'XXMAGICXX';
var EDITOR_MODE = false;


function create_material_elems() {
    // Generates DOM elements used by get_material_elem
    var materials_elem = document.getElementById('materials');
    for (var row of KEY_ROWS) {
        var div = document.createElement('div');
        materials_elem.appendChild(div);
        for (var key of row) {
            if (!(key in SELECT)) continue;
            var material = SELECT[key];
            var span = document.createElement('span');
            div.appendChild(span);
            span.id = 'material_' + material;
            span.setAttribute('data-material', material);
            span.className = 'material';
            span.textContent = key;
            span.style.background = css_material(material);
            span.onpointerdown = function(event) {
                var span = event.target;
                var material = Number(span.getAttribute('data-material'));
                window.game.select_material(material);
            };
        }
    }
}


function get_material_elem(material) {
    // Returns an element generated by create_material_elems
    return document.getElementById('material_' + material);
}


window.addEventListener('load', function() {
    var canvas = document.getElementById('canvas');
    var play_controls = document.getElementById('play_controls');
    var editor_controls = document.getElementById('editor_controls');
    var filename_input = document.getElementById('filename_input');
    var save_btn = document.getElementById('save_btn');
    var load_btn = document.getElementById('load_btn');
    var load_level_btn = document.getElementById('load_level_btn');
    var new_game_btn = document.getElementById('new_game_btn');
    var pause_btn = document.getElementById('pause_btn');
    var restart_btn = document.getElementById('restart_btn');
    var restart_btn2 = document.getElementById('restart_btn2');
    var add_portal_btn = document.getElementById('add_portal_btn');
    var move_person_btn = document.getElementById('move_person_btn');
    var editor_btn = document.getElementById('editor_btn');
    var play_btn = document.getElementById('play_btn');

    function hide(elem) {
        elem.classList.add('hidden');
    }
    function show(elem) {
        elem.classList.remove('hidden');
    }

    create_material_elems();

    window.addEventListener('keydown', function(event) {
        // Prevent spacebar or arrow keys from scrolling the damn page
        // Based on:
        // * https://stackoverflow.com/a/22559917
        // * https://stackoverflow.com/a/8916697
        var keyCode = event.keyCode;
        if(
            (
                keyCode === KEYCODE_SPACE ||
                keyCode === KEYCODE_DOWN ||
                keyCode === KEYCODE_UP)
            && (
                event.target === document.body ||
                event.target === window ||
                event.target === canvas
            )
        ) {
            event.preventDefault();
        }
    });

    function new_game(pixels, gamedata, image_url) {
        // NOTE: pixels is an optional Uint32Array, gamedata is an
        // optional Object, see DEFAULT_GAMEDATA, serialize, deserialize
        canvas.focus();

        var old_game = window.game;
        var paused = old_game && !old_game.is_running();
        if (old_game) old_game.stop();

        var game = new SandGame(canvas, pixels, gamedata, image_url);
        window.game = game;

        if (!paused) game.step();
        else game.render();
    }

    window.new_game = new_game;
    new_game_from_image('levels/1.png');

    function save_image(filename) {
        var canvas = document.createElement('canvas');
        canvas.width = game.width;
        canvas.height = game.height;
        draw_pixels_on_canvas(game.pixels, canvas);

        var data_url = canvas.toDataURL();
        var data_url_parts = data_url.split(',');
        var data = atob(data_url_parts[1]);
        data += MAGIC + JSON.stringify(serialize(window.game));
        data_url_parts[1] = btoa(data);
        data_url = data_url_parts.join(',');

        var link = document.createElement('a');
        document.body.appendChild(link);
        link.href = data_url;
        link.download = filename;
        link.click();
        link.remove();
    }

    save_btn.onclick = function() {
        canvas.focus();
        var filename = filename_input.value + '.png';
        if (!filename) return;
        save_image(filename);
    };

    load_btn.onclick = function() {
        canvas.focus();
        var filename = filename_input.value;
        if (!filename) return;
        new_game_from_image('images/' + filename + '.png');
    };

    load_level_btn.onclick = function() {
        canvas.focus();
        var filename = filename_input.value;
        if (!filename) return;
        new_game_from_image('levels/' + filename + '.png');
    };

    new_game_btn.onclick = function() {
        canvas.focus();
        new_game();
    };

    function new_game_from_image(image_url) {
        // CACHE BUST WHOOOOO
        var timestamp = Number(new Date());
        image_url += '?cache_bust=' + timestamp;

        var image = new Image();
        image.crossOrigin = 'Anonymous';
        image.onload = function() {
            var canvas = document.createElement('canvas');
            canvas.width = image.width;
            canvas.height = image.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(image, 0, 0);
            var image_data = ctx.getImageData(0, 0, image.width, image.height);
            var pixels = new Uint32Array(image_data.data.buffer);

            // We now reload the same image we just loaded by setting
            // image.src, but this time we want to get at the raw data,
            // so we can grab some JSON we've left after the PNG data.
            // Wheeee!..
            fetch(image_url)
            .then(res => res.arrayBuffer())
            .then(buffer => {
                // Unlike image_data.buffer, which contains pixel data parsed
                // from the raw PNG data by the Image and <canvas>, the buffer
                // variable here contains raw PNG data (to which we have
                // appended some JSON, with a magic byte sequence, MAGIC,
                // separating the PNG data from the JSON data).
                var gamedata = JSON.parse(new TextDecoder('ascii')
                    .decode(buffer).split(MAGIC)[1]);
                console.log("Loaded game data", gamedata);
                new_game(pixels, gamedata, image_url);
            });
        }
        image.onerror = function(event) {
            console.log("Error loading image: " + image_url);
        }
        image.src = image_url;
    }

    window.new_game_from_image = new_game_from_image;

    function pause() {
        game.stop();
        pause_btn.textContent = 'UNPAUSE';
    }
    function unpause() {
        game.start();
        pause_btn.textContent = 'PAUSE';
    }

    pause_btn.onclick = function() {
        canvas.focus();
        if (game.is_running()) {
            pause();
        } else {
            unpause();
        }
    };

    restart_btn.onclick = restart_btn2.onclick = function() {
        canvas.focus();
        game.restart();
    };

    add_portal_btn.onclick = function() {
        canvas.focus();
        game.select_material(null);
        game.adding_portal = true;
    }

    move_person_btn.onclick = function() {
        canvas.focus();
        game.select_material(null);
        game.moving_person = true;
    }

    play_mode_btn.onclick = function() {
        canvas.focus();
        EDITOR_MODE = false;
        game.select_material(null);
        hide(editor_controls);
        show(play_controls);
    }

    editor_mode_btn.onclick = function() {
        canvas.focus();
        EDITOR_MODE = true;
        game.select_material(SAND);
        hide(play_controls);
        show(editor_controls);
    }
});
